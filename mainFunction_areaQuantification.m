%script main_function_area
% Fix import filename issue. Need the filenames to come from the
% filenames themselves, not as user input
%% Inputs for user
%replace "Pictures" with where your folder containing the pictures is
location = '~/Documents/Work for Scott/Image_processing/Pictures/';

%name the excel file where the areas are stored
name_of_excel_file = 'test5';

%% Main function

%load_data_and_clean_filenames loads the data and removes '.jpg' from the
%end of the filename. I_struct contains the BW images and their names. 
I_struct = load_data_and_clean_filenames(location);

%run the code on the images. BW_out_array is the BW images, Area_array is a
%cell of the areas of each file. 
[BW_out_array,Area_array] = multiple_fR(I_struct,name_of_excel_file);

%if you want to see a BW picture, type imshow(BW_out_array.name_of_file) in
%the command window. If you want to see a list of specific areas, type
%Area_array.name_of_file in the command window

%% Supplemental functions

function I_struct = load_data_and_clean_filenames(location)

dir_struct = dir([location '/*.jpg']);

filenames = {dir_struct.name};

for filename_number = 1:length(filenames)
    filenames{filename_number} = filenames{filename_number}(1:end-4)
end

%read the images into a datastore
ds = imageDatastore(location,'Labels',filenames);

%read the images into a cell
I_list = readall(ds); 

%read the images into a structure
I_struct = cell2struct(I_list,filenames'); 


end

function [BW_out_array,Area_array] = multiple_fR(structure_of_images,name_of_excel_file)
%% This is a function with input a structure of images (several images grouped together) 
%% and output an excel file with list of areas. 

%% Variable setup
Area_array = {}; % setting up variables

BW_out_array = {}; % setting up variables

names = fieldnames(structure_of_images); %The list of names of each picture

%% Actual code. This block runs filterRegions_one on each picture in the group, stores the black and white image that is actually being quantified, and outputs the areas of the white images to the excel file.

for i = 1:numel(names) %iterate over the number of pictures
        
    %store BW image, and properties from running filterRegions_one on each
    %image
    [BW_out_array.(names{i}),props] = filterRegions_one(structure_of_images.(names{i})); 
    
    %store Area specifically from properties
    Area_array.(names{i}) = props.Area;
    
    %Write Area in a column in excel. Each image has its own column and the
    %numbering starts at A.
    writematrix(Area_array.(names{i}),name_of_excel_file,'FileType','Spreadsheet','Range',[char(64+i) '2:' char(64+i) num2str(length(Area_array.(names{i}))+1)]);

    
end

%Write name of each image for each column
writecell(names',name_of_excel_file,'FileType','Spreadsheet','Range',[char(65) '1:' char(64+length(names)) '1']); 

end

function [BW_out,properties] = filterRegions_one(BW_in)
%filterRegions  Filter BW image using auto-generated code from imageRegionAnalyzer app.
%  [BW_OUT,PROPERTIES] = filterRegions(BW_IN) filters binary image BW_IN
%  using auto-generated code from the imageRegionAnalyzer app. BW_OUT has
%  had all of the options and filtering selections that were specified in
%  imageRegionAnalyzer applied to it. The PROPERTIES structure contains the
%  attributes of BW_out that were visible in the app.

% Auto-generated by imageRegionAnalyzer app on 21-Jun-2019
%---------------------------------------------------------

BW_out = imcomplement(imbinarize(BW_in(:,:,1)));

% Remove portions of the image that touch an outside edge.
BW_out = imclearborder(BW_out);

% Filter image based on image properties.
BW_out = bwpropfilt(BW_out, 'Area', [3000,200000]);

% Get properties.
properties = regionprops(BW_out, {'Area', 'Eccentricity', 'EquivDiameter', 'EulerNumber', 'MajorAxisLength', 'MinorAxisLength', 'Orientation', 'Perimeter'});

% Sort the properties.
properties = sortProperties(properties, 'Area');

% Uncomment the following line to return the properties in a table.
properties = struct2table(properties);

%writematrix(properties.Area,['Area count'],'FileType', 'spreadsheet')

function properties = sortProperties(properties, sortField)

    % Compute the sort order of the structure based on the sort field.
    [~,idx] = sort([properties.(sortField)], 'descend');

    % Reorder the entire structure.
    properties = properties(idx);
    
end
end
